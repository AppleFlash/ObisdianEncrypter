@testable import ObsidianEncrypter
import Foundation
import XCTest
{% macro makeParams closure %}{% for param in closure.parameters %}arg{{ forloop.counter }}{{ ', ' if not forloop.last }}{% endfor %}{% endmacro %}
{% macro makeTypeList closure %}{% for param in closure.parameters %}{{ param.typeName }}{{ ', ' if not forloop.last }}{% endfor %}{% endmacro %}
{% macro makeClosureParams variable %}({% for param in variable.typeName.closure.parameters %}{% if param.type != nil %}{{ variable.definedInTypeName }}.{% endif %}{{ param.typeName }}{{ ', ' if not forloop.last }}{% endfor %}){% endmacro %}
{% macro makeClosureType variable %}{% call makeClosureParams variable %} {{ 'async ' if variable.typeName.closure.isAsync }}{{ 'throws ' if variable.typeName.closure.throws }} -> {{ variable.typeName.closure.returnTypeName }}{% endmacro %}

{% for type in types.all where type.implements.ClosureMockable %}
final class {{ type.name }}Mock {
    {% for variable in type.variables where variable.isClosure %}
    var {{ variable.name }}Stub: ({% call makeClosureType variable %})?
    {% if not variable.typeName.closure.returnTypeName.isVoid %}var {{ variable.name }}DefaultValue: {{ variable.typeName.closure.returnTypeName }}! {% endif %}
    private (set) var {{ variable.name }}InvocationCount = 0
    private (set) var {{ variable.name }}ReceivedArgs: [{% call makeClosureParams variable %}] = []
    {%- set paramsList %}{% call makeParams variable.typeName.closure %}{% endset %}
    private(set) lazy var {{ variable.name }}: {% call makeClosureType variable %} = { {{ paramsList }} {{ 'in' }}
        guard let stub = self.{{ variable.name }}Stub else {
            XCTFail("Stub not set for {{ variable.name }}Stub")
            return {% if not variable.typeName.closure.returnTypeName.isVoid %}self.{{ variable.name }}DefaultValue {% endif %}
        }

        self.{{ variable.name }}ReceivedArgs.append(({{ paramsList }}))
        return {{ 'try' if variable.typeName.closure.throws }} {{ 'await' if variable.typeName.closure.isAsync }} stub({{ paramsList }})
    }
    {% endfor %}
}

extension {{ type.name }} {
    static func mock(_ object: {{ type.name }}Mock) -> Self {
        {{type.name}}({% for argument in type.storedVariables %}{{argument.name}}: object.{{argument.name}}{{ ', ' if not forloop.last }}{% endfor %})
    }
}
{% endfor %}